<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyHosting</name>
    </assembly>
    <members>
        <member name="T:EasyHosting.Meta.ConfigurationException">
            <summary>
            Wyjątek konfiguracji, rzucany, jeśli konfiguracja została nieprawidłowo zdefiniowana. Wyrzucenie wyjątku indykuje błąd fizyczny (pod kątem poprawności konfiguracji) w kodzie.
            </summary>
        </member>
        <member name="T:EasyHosting.Meta.SerializerFieldAttribute">
            <summary>
            Określa pole do uwzględnienia w serializacji
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.SerializerFieldAttribute.ApiName">
            <summary>
            Nazwa pola w komunikacji sieciowej
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.SerializerFieldAttribute.Required">
            <summary>
            Określa, czy pole jest wymagane
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.SerializerFieldAttribute.Default">
            <summary>
            Określa wartość domyślną dla pola (jeśli pole nie jest wymagane, powinno definiować wartość domyślną)
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.SerializerFieldAttribute.Validators">
            <summary>
            Określa zestaw walidatorów dla pola
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.SerializerFieldAttribute.#ctor(System.String,System.Boolean,System.Object)">
            <param name="apiName">Nazwa pola w komunikacji sieciowej</param>
            <param name="required">Określa, czy pole jest wymagane</param>
            <param name="defaultValue">Określa wartość domyślną dla pola (jeśli pole nie jest wymagane, powinno definiować wartość domyślną)</param>
            <exception cref="T:EasyHosting.Meta.ConfigurationException">Wyjątek wyrzucany dla apiName == "__GLOBAL__". Jest to nazwa zarezerwowana.</exception>
        </member>
        <member name="T:EasyHosting.Meta.Validators.AlternativeValidatorAttribute">
            <summary>
            Klasa pozwalająca zdefiniować zestaw alternatyw pod kątem konfiguracyjnej walidacji pól
            
            Definiujemy, że pole ma spełniać warunek A lub B lub C lub ...
            </summary>
        </member>
        <member name="F:EasyHosting.Meta.Validators.AlternativeValidatorAttribute.AlternateValidators">
            <summary>
            Przechowuje listę alternatyw
            </summary>
        </member>
        <member name="F:EasyHosting.Meta.Validators.AlternativeValidatorAttribute.ErrorCodeOnFail">
            <summary>
            Kod błędu, jaki ma być zwracany w przypadku braku spełnienia warunku. Domyślnie: "ALTERNATIVE_CHECK_FAILED"
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.Validators.AlternativeValidatorAttribute.#ctor(System.String,EasyHosting.Meta.Validators.FieldValidatorAttribute[])">
            <summary>
            Klasa pozwalająca zdefiniować zestaw alternatyw pod kątem konfiguracyjnej walidacji pól
            </summary>
            <param name="errorCodeOnFail">Kod błędu, który ma się zwrócić w przypadku nieudanej walidacji. Jeśli null, zostanie przypisany ALTERNATIVE_CHECK_FAILED</param>
            <param name="alternateValidators">Ciąg kolejnych, alternatywnych walidatorów</param>
        </member>
        <member name="M:EasyHosting.Meta.Validators.AlternativeValidatorAttribute.Validate(System.Object,System.Boolean)">
            <summary>
            Wykonuje walidację w oparciu o zdefiniowane alternatywy. Jeśli przynajmniej jedna zostanie spełniona, zwraca jej wynik
            </summary>
            <param name="o">Obiekt do walidacji</param>
            <param name="throwException">Definiuje czy ma być wyrzucony wyjątek w przypadku błędu walidacji wszystkich alternatyw</param>
            <returns>Przepisuje wynik z pierwszej spełnionej alternatywy (zwalidowany obiekt, ew. konwertowany na określony typ danych))</returns>
            <exception cref="T:EasyHosting.Meta.Validators.ValidationException">Wyjątek wyrzucany jeśli throwException==true oraz dane nie przeszły walidacji</exception>
        </member>
        <member name="T:EasyHosting.Meta.Validators.ConjuctionValidatorAttribute">
            <summary>
            Klasa pozwalająca zdefiniować zestaw warunków, które pole musi spełniać (koniunkcja)
            </summary>
        </member>
        <member name="F:EasyHosting.Meta.Validators.ConjuctionValidatorAttribute.Validators">
            <summary>
            Zestaw walidatorów, które pola musi spełniać
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.Validators.ConjuctionValidatorAttribute.#ctor(EasyHosting.Meta.Validators.FieldValidatorAttribute[])">
            <summary>
            Klasa pozwalająca zdefiniować zestaw warunków, które pole musi spełniać
            </summary>
            <param name="validators">Ciąg kolejnych walidatorów</param>
        </member>
        <member name="M:EasyHosting.Meta.Validators.ConjuctionValidatorAttribute.Validate(System.Object,System.Boolean)">
            <summary>
            Wykonuje walidację w oparciu o zdefiniowane warunki. Jeśli żaden walidator nie zwraca błędów, zwraca wynik
            </summary>
            <param name="o">Obiekt do walidacji</param>
            <param name="throwException">Definiuje czy ma być wyrzucony wyjątek w przypadku błędu walidacji wszystkich alternatyw</param>
            <returns>Przepisuje wynik z pierwszej spełnionej alternatywy (zwalidowany obiekt, ew. konwertowany na określony typ danych))</returns>
            <exception cref="T:EasyHosting.Meta.Validators.ValidationException">Wyjątek wyrzucany jeśli throwException==true oraz dane nie przeszły walidacji</exception>
        </member>
        <member name="T:EasyHosting.Meta.Validators.FieldValidatorAttribute">
            <summary>
            Bazowa klasa definiowania atrybutów walidacji danych serializatora
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.FieldValidatorAttribute.Errors">
            <summary>
            Lista błędów walidacji
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.FieldValidatorAttribute.ErrorsText">
            <summary>
            Konwertuje listę błędów na tekst
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.FieldValidatorAttribute.ErrorsCount">
            <summary>
            Liczba błędów
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.Validators.FieldValidatorAttribute.AddError(System.String,System.String)">
            <summary>
            Dodaje treść błędu do listy wszystkich błędów które wystąpiły podczas walidacji
            </summary>
            <param name="errorCode">Kod błędu</param>
            <param name="errorMessage">Treść błędu</param>
        </member>
        <member name="M:EasyHosting.Meta.Validators.FieldValidatorAttribute.AddErrors(System.Collections.Generic.IEnumerable{EasyHosting.Meta.Validators.ValidationError})">
            <summary>
            Dodaje treść błędu do listy wszystkich błędów które wystąpiły podczas walidacji
            </summary>
            <param name="errors">Błędy do dodania</param>
        </member>
        <member name="M:EasyHosting.Meta.Validators.FieldValidatorAttribute.ThrowException">
            <summary>
            Rzuca wszystkie dodane błędy spakowane w pojedynczy wyjątek "ValidationException"
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.Validators.FieldValidatorAttribute.Validate(System.Object,System.Boolean)">
            <summary>
            Wykonuje walidację danych
            </summary>
            <param name="o">Obiekt do zwalidowania</param>
            <param name="throwException">Określa czy wyrzucić wyjątek, jeśli walidacja się nie powiedzie</param>
            <returns>Zwalidowany obiekt</returns>
            <exception cref="T:EasyHosting.Meta.Validators.ValidationException">Wyrzucany przy nieudanej walidacji</exception>
        </member>
        <member name="T:EasyHosting.Meta.Validators.NullValidatorAttribute">
            <summary>
            Defiuje, czy pole może być NULLem
            </summary>
        </member>
        <member name="F:EasyHosting.Meta.Validators.NullValidatorAttribute.CanBeNull">
            <summary>
            Określa sposób walidacji (pozwala lub blokuje wartość NULL)
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.Validators.NullValidatorAttribute.Validate(System.Object,System.Boolean)">
            <summary>
            Wykonuje walidację
            </summary>
            <param name="o">Obiekt do walidacji</param>
            <param name="throwException">Definiuje czy ma być wyrzucony wyjątek w przypadku błędu walidacji wszystkich alternatyw</param>
            <returns>Przepisuje wynik z pierwszej spełnionej alternatywy (zwalidowany obiekt, ew. konwertowany na określony typ danych))</returns>
            <exception cref="T:EasyHosting.Meta.Validators.ValidationException">Wyjątek wyrzucany jeśli throwException==true oraz dane nie przeszły walidacji</exception>
        </member>
        <member name="T:EasyHosting.Meta.Validators.RangeValidatorAttribute">
            <summary>
            Walidator uwzględniający zakres dozwolonych wartości. Typ danych dla walidacji musi być możliwy do porównań większe/mniejsze równe
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.RangeValidatorAttribute.MinValue">
            <summary>
            Minimalna dozwolona wartość
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.RangeValidatorAttribute.MaxValue">
            <summary>
            Maksymalna dozwolona wartość
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.RangeValidatorAttribute.AllowNull">
            <summary>
            Czy dozwolony jest NULL
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.Validators.RangeValidatorAttribute.#ctor(System.Object,System.Object,System.Boolean)">
            <param name="minValue">Minimalna dozwolona wartość (jeśli NULL, warunek nie jest sprawdzany)</param>
            <param name="maxValue">Maksymalna dozwolona wartość (jeśli NULL, warunek nie jest sprawdzany)</param>
            <param name="allowNull">Czy wartość może być NULLem</param>
        </member>
        <member name="M:EasyHosting.Meta.Validators.RangeValidatorAttribute.Validate(System.Object,System.Boolean)">
            <summary>
            Wykonuje walidację
            </summary>
            <param name="o">Obiekt do walidacji</param>
            <param name="throwException">Definiuje czy ma być wyrzucony wyjątek w przypadku błędu walidacji wszystkich alternatyw</param>
            <returns>Przepisuje wynik z pierwszej spełnionej alternatywy (zwalidowany obiekt, ew. konwertowany na określony typ danych))</returns>
            <exception cref="T:EasyHosting.Meta.Validators.ValidationException">Wyjątek wyrzucany jeśli throwException==true oraz dane nie przeszły walidacji</exception>
        </member>
        <member name="T:EasyHosting.Meta.Validators.TextLengthRangeValidatorAttribute">
            <summary>
            Weryfikuje dozwoloną długość tekstu
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.TextLengthRangeValidatorAttribute.MinValue">
            <summary>
            Minimalna dozwolona długość tekstu (jeśli -1, nie jest sprawdzana)
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.TextLengthRangeValidatorAttribute.MaxValue">
            <summary>
            Maksymalna dozowlona długość tekstu (jeśli -1, nie jest sprawdzana)
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.Validators.TextLengthRangeValidatorAttribute.#ctor(System.Int32,System.Int32)">
            <param name="minLength">Minimalna dozwolona długość tekstu (jeśli -1, nie jest sprawdzana)</param>
            <param name="maxLength">Maksymalna dozowlona długość tekstu (jeśli -1, nie jest sprawdzana)</param>
        </member>
        <member name="M:EasyHosting.Meta.Validators.TextLengthRangeValidatorAttribute.Validate(System.Object,System.Boolean)">
            <summary>
            Wykonuje walidację
            </summary>
            <param name="o">Obiekt do walidacji</param>
            <param name="throwException">Definiuje czy ma być wyrzucony wyjątek w przypadku błędu walidacji wszystkich alternatyw</param>
            <returns>Przepisuje wynik z pierwszej spełnionej alternatywy (zwalidowany obiekt, ew. konwertowany na określony typ danych))</returns>
            <exception cref="T:EasyHosting.Meta.Validators.ValidationException">Wyjątek wyrzucany jeśli throwException==true oraz dane nie przeszły walidacji</exception>
        </member>
        <member name="T:EasyHosting.Meta.Validators.TypeValidatorAttribute">
            <summary>
            Walidator typu. Walidacja typu jest domyślnie obsługiwana przez serializatory poprzez typ pola, do którego przypisujemy wartość. Tego atrybutu można użyć jako dodatkową walidację, jeśli przyjmujemy tylko określone typy dziedzicące z bazowego
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.TypeValidatorAttribute.Type">
            <summary>
            Wymagany typ
            </summary>
        </member>
        <member name="P:EasyHosting.Meta.Validators.TypeValidatorAttribute.AllowInheritance">
            <summary>
            Określa, czy akceptowane są typy dziedzące z podanego
            </summary>
        </member>
        <member name="M:EasyHosting.Meta.Validators.TypeValidatorAttribute.#ctor(System.Type,System.Boolean)">
            <param name="type">Wymagany typ</param>
            <param name="allowInheritance">Określa, czy akceptowane są typy dziedzące z podanego</param>
        </member>
        <member name="M:EasyHosting.Meta.Validators.TypeValidatorAttribute.Validate(System.Object,System.Boolean)">
            <summary>
            Wykonuje walidację
            </summary>
            <param name="o">Obiekt do walidacji</param>
            <param name="throwException">Definiuje czy ma być wyrzucony wyjątek w przypadku błędu walidacji wszystkich alternatyw</param>
            <returns>Przepisuje wynik z pierwszej spełnionej alternatywy (zwalidowany obiekt, ew. konwertowany na określony typ danych))</returns>
            <exception cref="T:EasyHosting.Meta.Validators.ValidationException">Wyjątek wyrzucany jeśli throwException==true oraz dane nie przeszły walidacji</exception>
        </member>
        <member name="M:EasyHosting.Meta.Validators.ValidationException.GetErrorsList">
            <summary>
            Zwraca wszystkie przypisane błędy w jednej liście (bez podziału na pola, dla których te błędy zostały przypisane)
            </summary>
            <returns>Lista błędów</returns>
        </member>
        <member name="M:EasyHosting.Models.Actions.ActionResponseSerializer.CreateInstance(System.String,System.String,Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{EasyHosting.Models.Actions.ErrorData})">
            <summary>
            Tworzy instancję tego serializatora wykonując walidację wprowadzonych danych
            </summary>
            <param name="status">Status odpowiedzi</param>
            <param name="actionName">Nazwa wykonanej akcji</param>
            <param name="data">Dane wynikowe wykonanej akcji</param>
            <param name="errors">Błędy wykonanej akcji</param>
            <returns></returns>
        </member>
        <member name="T:EasyHosting.Models.Actions.ActionsManager">
            <summary>
            Klasa do zarządzania dostępnymi akcjami
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Actions.ActionsManager.#ctor(System.Collections.Generic.Dictionary{System.String,EasyHosting.Models.Actions.BaseAction})">
            <summary>
            Konstruktor z inicjalną definicją słownika akcji
            </summary>
            <param name="actionsDictionary">Inicjalny słownik akcji</param>
        </member>
        <member name="M:EasyHosting.Models.Actions.ActionsManager.#ctor">
            <summary>
            Domyślny konstruktor, pozostawia słownik akcji pusty, do manualnego uzupełnienie
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Actions.ActionsManager.AddAction(System.String,EasyHosting.Models.Actions.BaseAction)">
            <summary>
            Dodaje akcję do listy dostępnych akcji w tym managerze
            </summary>
            <param name="actionName">Nazwa (identyfikator) akcji</param>
            <param name="action">Obiekt definiujący akcję</param>
        </member>
        <member name="M:EasyHosting.Models.Actions.ActionsManager.AddActions(System.Collections.Generic.Dictionary{System.String,EasyHosting.Models.Actions.BaseAction})">
            <summary>
            Dodaje wiele akcji
            </summary>
            <param name="actions">Słownik akcji do dodania</param>
        </member>
        <member name="M:EasyHosting.Models.Actions.ActionsManager.PerformActions(EasyHosting.Models.Server.ClientConnection,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Wykonuje akcje zdefiniowane w źródłowym JObject.
            </summary>
            <param name="actionsData">
            Definicja akcji. Struktura:
            {
            	"actions": [
            		{
            			"name": "action-name-1",
            			"data": { ... }
            		},
            		{
            			"name": "action-name-2",
            			"data": { ... }
            		},
            		...
            	]
            }
            </param>
            <returns>
            Wyniki każdej akcji w kolejności takiej, w jakiej zdefiniowane były akcje w źródłowym JObject.
            Struktura:
            {
            	"actions": [
            		{
            			"name": "action-name-1",
            			"data": (response)
            		},
            		{
            			"name": "action-name-2",
            			"data": (response)
            		},
            		...
            	]
            }
            </returns>
        </member>
        <member name="M:EasyHosting.Models.Actions.ActionsManager.PerformAction(EasyHosting.Models.Server.ClientConnection,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Wykonuje pojedynczą akcję
            </summary>
            <param name="actionName">Nazwa akcji</param>
            <param name="actionData">Dane akcji</param>
            <returns>Bezpośrednia odpowiedź z wywołania akcji</returns>
        </member>
        <member name="M:EasyHosting.Models.Actions.ActionsManager.PerformAction(EasyHosting.Models.Server.ClientConnection,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Wykonuje pojedynczą akcję
            </summary>
            <param name="actionData">
            Dane pojedycznej akcji
            Struktura:
            {
            	"name": "action-name-1",
            	"data": { ... }
            }
            </param>
            <returns>Bezpośrednia odpowiedź z wywołania akcji</returns>
        </member>
        <member name="F:EasyHosting.Models.Actions.ActionsResponseSerializer.Identifier">
            <summary>
            Identyfikator zapytania, przepisywany z danych akcji przychodzących. Służy do rozpoznawania i przyporządkowywania zapytań do odpowiedzi po stronie klienckiej
            </summary>
        </member>
        <member name="T:EasyHosting.Models.Actions.BaseAction">
            <summary>
            Klasa do definiowania jednostkowych czynności, wywoływanych przez API
            </summary>
        </member>
        <member name="E:EasyHosting.Models.Actions.BaseAction.Invoked">
            <summary>
            Wydarzenie wywoływane kiedy dowolna akcja zostanie wywołana
            </summary>
        </member>
        <member name="E:EasyHosting.Models.Actions.BaseAction.InvokedThis">
            <summary>
            Wydarzenie wywoływane kiedy ta akcja zostanie wywołana
            </summary>
        </member>
        <member name="E:EasyHosting.Models.Actions.BaseAction.Finished">
            <summary>
            Wydarzenie wywoływane kiedy dowolna akcja się zakończy
            </summary>
        </member>
        <member name="E:EasyHosting.Models.Actions.BaseAction.FinishedThis">
            <summary>
            Wydarzenie wywoływane kiedy ta akcja się zakończy
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Actions.BaseAction.RequestSerializerType">
            <summary>
            Serializator używany do walidacji danych wejściowych
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Actions.BaseAction.ResponseSerializerType">
            <summary>
            Serializator używany do przygotowania odpowiedzi (danych wyjściowych)
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Actions.BaseAction.#ctor(System.Type,System.Type)">
            <param name="requestSerializerType">Serializator danych wejściowych</param>
            <param name="responseSerializerType">Serializator danych wyjściowych</param>
        </member>
        <member name="M:EasyHosting.Models.Actions.BaseAction.Invoke(EasyHosting.Models.Server.ClientConnection,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Wywołuje wykonanie akcji
            </summary>
            <param name="requestData">Dane wejściowe</param>
            <returns>Odpowiedź od akcji</returns>
        </member>
        <member name="M:EasyHosting.Models.Actions.BaseAction.InitializeResponseSerializer">
            <summary>
            Inicjalizuje serializator odpowiedzi w oparciu o zdefiniowany w konstruktorze typu serializator
            </summary>
            <returns>Zainicjalizowany serializator</returns>
        </member>
        <member name="M:EasyHosting.Models.Actions.BaseAction.PerformAction(EasyHosting.Models.Server.ClientConnection,EasyHosting.Models.Serialization.BaseSerializer)">
            <summary>
            Właściwa metoda wykonująca akcję. Otrzymuje na wejściu zwalidowane dane po walidacji
            </summary>
            <param name="requestData">Dane wejściowe wpisane do serializatora. Serializator przekazywany na wejściu jest typu "requestSerializerType", definiowanego w konstruktorze</param>
            <returns>Odpowiedź w postaci serializatora</returns>
        </member>
        <member name="P:EasyHosting.Models.Client.ClientSocket.Initialized">
            <summary>
            Określa, czy TcpClient został zainicjalizowany
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Client.ClientSocket.SendRequest(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Tworzy i wysyła zapytanie do serwera. Na odpowiedź na zapytanie należy nasłuchiwać na event'cie RequestResponseReceived
            </summary>
            <param name="requestData">Dane zapytania do wysłania, metoda obudowuje je dodatkowo odpowiednimi meta-danymi zapytania</param>
        </member>
        <member name="M:EasyHosting.Models.Client.ClientSocket.WriteData(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Wypisuje dane na strumień wyjściowy do serwera
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:EasyHosting.Models.Client.ClientSocket.ProcessReceivedData(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Przetwarza dane otrzymane od serwera, określa czy są odpowiedzią na zapytanie, czy sygnałem od serwera
            </summary>
            <param name="data">Dane do przetworzenia</param>
        </member>
        <member name="M:EasyHosting.Models.Client.ClientSocket.UpdateCommunication">
            <summary>
            Sprawdza, czy serwer nadał komunikację do klienta, przetwarza komunikację od serwera, jeśli została nadana
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Client.Request.ParentSocket">
            <summary>
            Socket klienta, za pośrednictwem którego zostało wysłane zapytanie
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Client.Request.SentAt">
            <summary>
            Określa moment czasowy, w którym zapytanie zostało wysłane. Jest ustawione tylko jeśli zapytanie ma status SENT lub RESPONSE_RECEIVED
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Client.Request.ResponseReceivedAt">
            <summary>
            Określa moment czasowy, w którym przypisana została odpowiedź na wysłane zapytanie. Jest ustawione tylko jeżeli zapytanie ma status RESPONSE_RECEIVED
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Client.Request.Send">
            <summary>
            Wysyła zapytanie do serwera
            </summary>
            <exception cref="T:EasyHosting.Models.Client.RequestStateException">Rzucany, jeśli zapytanie zostało już wysłane i następuje ponowna próba wysłania zapytania</exception>
        </member>
        <member name="M:EasyHosting.Models.Client.Request.AttachResponse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Przypina odpowiedź dla zapytania
            </summary>
            <param name="response">Odpowiedź do przypięcia</param>
            <exception cref="T:EasyHosting.Models.Client.RequestStateException">Rzucany, jeżeli zapytanie nie jest w stanie "SENT" przy próbie przypięcia odpowiedzi</exception>
        </member>
        <member name="F:EasyHosting.Models.Client.Serializers.StandardRequestWrapperSerializer.RequestCode">
            <summary>
            Kod (identyfikator) zapytania, zwracany w odpowiedzi do zapytania od serwera
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Client.Serializers.StandardRequestWrapperSerializer.Data">
            <summary>
            Dane zapytania
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Client.Serializers.StandardResponseWrapperSerializer.CommunicateType">
            <summary>
            Określa typ komunikatu
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Client.Serializers.StandardResponseWrapperSerializer.RequestCode">
            <summary>
            Jeżeli zapytania przychodzące refiniowało kod zapytania, powinien on zostać zwrotnie przekazany w komunikacie wychodzącym
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Client.Serializers.StandardResponseWrapperSerializer.Data">
            <summary>
            Określa dane komunikatu
            </summary>
        </member>
        <member name="T:EasyHosting.Models.Serialization.BaseSerializer">
            <summary>
            Bazowa klasa dla serializatorów danych wysyłanych i odpowiedzi dla klientów
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Serialization.BaseSerializer.DataOrigin">
            <summary>
            Przechowuje oryginalny obiekt JSONa przekazany do serializatora
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Serialization.BaseSerializer.Errors">
            <summary>
            Słownik błędów, które wystąpiły podczas walidacji (nazwa pola -> lista błędów dla pola)
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Serialization.BaseSerializer.AddError(System.String,System.String,System.String)">
            <summary>
            Dodaje błąd do listy błędów dla wybranego pola
            </summary>
            <param name="fieldName">Nazwa pola</param>
            <param name="errorCode">Kod błędu</param>
            <param name="errorMessage">Treść błędu</param>
        </member>
        <member name="M:EasyHosting.Models.Serialization.BaseSerializer.#ctor">
            <summary>
            Server -> User   Serializer constructor
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Serialization.BaseSerializer.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            User -> Server   Serializer constructor
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:EasyHosting.Models.Serialization.BaseSerializer.SetData(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Ustawia dane źródłowe dla serializatora
            </summary>
            <param name="data">Dane źródłowe dla serializatora</param>
        </member>
        <member name="M:EasyHosting.Models.Serialization.BaseSerializer.GetApiObject">
            <summary>
            Zwraca JObject o formacie zdefiniowanym jako format API (W atrybucie SerializerField argument apiName)
            </summary>
            <returns></returns>
        </member>
        <member name="T:EasyHosting.Models.Serialization.StandardCommunicateSerializer">
            <summary>
            Serializator definiujący standardowy komunikat od serwera (dowolna odpowiedź lub wysyłana informacja)
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Serialization.StandardCommunicateSerializer.CommunicateType">
            <summary>
            Określa typ komunikatu
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Serialization.StandardCommunicateSerializer.RequestCode">
            <summary>
            Jeżeli zapytania przychodzące refiniowało kod zapytania, powinien on zostać zwrotnie przekazany w komunikacie wychodzącym
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Serialization.StandardCommunicateSerializer.Data">
            <summary>
            Określa dane komunikatu
            </summary>
        </member>
        <member name="T:EasyHosting.Models.Serialization.StandardRequestSerializer">
            <summary>
            Serializator do inicjalnej walidacji danych przychodzących (przed przekazaniem do menadżera akcji)
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Serialization.StandardRequestSerializer.RequestCode">
            <summary>
            Jeżeli zapytanie przychodzące definiuje kod zapytania, zostanie on zwrócony w odpowiedzi (wyniku zapytania)
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Serialization.StandardRequestSerializer.Data">
            <summary>
            Dane zapytania
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Server.ClientConnection.CommunicatesQueue">
            <summary>
            Komunikaty typu "PUSH", czyli wysałane z serwera do użytkownika. Nie są to odpowiedzi do zapytań
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ClientConnection.ServerSocket">
            <summary>
            ServerSocket z którym klient jest połączony
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ClientConnection.Session">
            <summary>
            Sesja przypisana do klienta
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ClientConnection.BsonWriter">
            <summary>
            Prefedefiniowany BsonWriter do serializacji binarnej komunikacji z klientem
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ClientConnection.BsonReader">
            <summary>
            Predefiniowany BsonReader do deserializacji binarnej komunikacji z klientem
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ClientConnection.TcpClient">
            <summary>
            Fizyczne połączenie klienta
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ClientConnection.DataAvailable">
            <summary>
            Określa czy klient nadał jakieś dane
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Server.ClientConnection.GetData">
            <summary>
            Pobiera dane od klienta
            </summary>
            <returns></returns>
        </member>
        <member name="M:EasyHosting.Models.Server.ClientConnection.WriteData(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Wpisuje dane do strumienia komunikacji z klientem
            </summary>
            <param name="data">Dane do wpisania</param>
        </member>
        <member name="M:EasyHosting.Models.Server.ClientConnection.AddCommunicate(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Dodaje nowy komunikat do kolejki. Po przetworzeniu zapytań wszystkie komunikaty z kolejki są wysyłane do użytkownika
            </summary>
            <param name="communicate">Komunikat</param>
        </member>
        <member name="M:EasyHosting.Models.Server.ClientConnection.SendCommunicates">
            <summary>
            Metoda wysyła wszystkie zakolejkowane komunikaty
            
            Powinna być wywoływana tylko przez bazową klasę "ServerSocket"
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Server.ClientConnection.Flush">
            <summary>
            Fizyczna wysyłka danych po ich wpisaniu do strumienia
            </summary>
        </member>
        <member name="T:EasyHosting.Models.Server.ServerSocket">
            <summary>
            Klasa definiująca podstawowe funkcjonalności gniazda serwera, tj. przechwytywanie połączeń, rozpoznawanie połączeń zautoryzowanych, wymaganie autoryzacji. Wymaga nadpisania AuthorizeConnection oraz HandleRequest
            </summary>
        </member>
        <member name="F:EasyHosting.Models.Server.ServerSocket.TimeForAuthorization">
            <summary>
            Określa po jakim czasie bez poprawnej autoryzacji połączenie z klientem zostanie zamknięte przez gniazdo
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ServerSocket.Initialized">
            <summary>
            Określa, czy TcpListener został zainicjalizowany i nasłuchuje połączeń
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ServerSocket.TcpListener">
            <summary>
            Zainicjalizowany TcpListener
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ServerSocket.IpAddress">
            <summary>
            Określa na jakim adresie IP nasłuchuje gniazdo
            </summary>
        </member>
        <member name="P:EasyHosting.Models.Server.ServerSocket.Port">
            <summary>
            Określa port na którym nasłuchuje gniazdo
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.GetAuthorizationResponseSuccessful">
            <summary>
            Określa jaka odpowiedź ma być zwrócona do klienta w przypadku udanej autoryzacji
            </summary>
            <returns>Obiekt JSON do przekazania do klienta</returns>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.GetAuthorizationResponseFailed">
            <summary>
            Określa jaka odpowiedź ma być zwrócona do klienta w przypadku nieudanej autoryzacji
            </summary>
            <returns>Obiekt JSON do przekazania do klienta</returns>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.GetDisconnectedSignal">
            <summary>
            Treść komunikatu przy odłączeniu klienta od serwera
            </summary>
            <returns>Obiekt JSON do przekazania do klienta</returns>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.GetAuthorizationTimeoutSignal">
            <summary>
            Treść komunikatu przy odłączeniu klienta od serwera przez zbyt długi czas autoryzacji
            </summary>
            <returns>Obiekt JSON do przekazania do klienta</returns>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.Start">
            <summary>
            Uruchamia socket
            </summary>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.DisconnectClient(EasyHosting.Models.Server.ClientConnection)">
            <summary>
            Odłącza klienta od serwera
            </summary>
            <param name="clientToDisconnect">Klient do odłączenia</param>
            <returns>True jeśli odłączenie poprawne, False jeśli klient już dodany do listy klientów do odłączenia</returns>
            <exception cref="T:System.ArgumentException">Rzucany jeśli klient nie jest połączony z serwerem</exception>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.ClientConnected(EasyHosting.Models.Server.ClientConnection,System.Boolean,EasyHosting.Models.Server.ConnectionStatus)">
            <summary>
            Sprawdza, czy klient jest połączony z serwerem
            </summary>
            <param name="client">Klient do sprawdzenia</param>
            <param name="searchDependingOnStatus">Jeśli true, użyty zostanie dodatkowy filtr, sprwadzający tylko klientów zautoryzowanych lub tylko niezautoryzacowanych</param>
            <param name="connectionStatus">Jeśli searchDependingOnStatus = true, po jakim statusie powinniśmy wyszukiwać połączenia</param>
            <returns></returns>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.AuthorizeConnection(EasyHosting.Models.Server.ClientConnection,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Metoda wywoływana po uzyskaniu pierwszego strumienia danych z 
            niezautoryzowanego połączenia. Powinna zwalidować poprawność 
            danych autoryzacyjnych w przychodzącym strumieniu danych
            i zwrócić "true" jeśli autoryzacja przebiegła pomyslnie lub
            "false" w przeciwnym przypadku
            </summary>
            <param name="conn">Połączenie z którego przyszły dane autoryzacyjne</param>
            <param name="requestData">Dane przychodzące od klienta</param>
            <returns>True - autoryzacja poprawna; False - autoryzacja odrzucona</returns>
        </member>
        <member name="M:EasyHosting.Models.Server.ServerSocket.HandleRequest(EasyHosting.Models.Server.ClientConnection,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Metoda wywoływana po uzyskaniu strumienia danych ze 
            zautoryzowanego połączenia. Strumień danych jest konwertowany
            do obiektu JObject i przekazywany wraz z połączeniem.
            </summary>
            <param name="conn">Połączenie klienta</param>
            <param name="requestData">Dane przychodzące od klienta</param>
            <returns>Odpowiedź dla klienta w formacie JObject</returns>
        </member>
        <member name="M:EasyHosting.Models.Server.Session.Set(System.String,System.Object)">
            <summary>
            Ustawia wartość w sesji
            </summary>
            <param name="name">Nazwa wartości do ustawienia</param>
            <param name="value">Wartość do ustawienia</param>
        </member>
        <member name="M:EasyHosting.Models.Server.Session.Get(System.String)">
            <summary>
            Pobiera wartość z sesji
            </summary>
            <param name="name">Nazwa wartości do pobrania</param>
            <returns>Wartość przypisana do podanej nazwy lub NULL jeśli brak przypisanej wartości</returns>
        </member>
        <member name="M:EasyHosting.Models.Server.Session.Get``1(System.String)">
            <summary>
            Pobiera wartość sesji i castuje ją na podany typ (jeśli jest to możliwe)
            </summary>
            <typeparam name="T">Typ na który obiekt w sesji powinien zostać scastowany</typeparam>
            <param name="name">Nazwa do wyszukania</param>
            <returns>Wartość przypisana do podanej nazwy</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Wyjątek wyrzucany jeśli podana nazwa nie jest zapisana w sesji</exception>
        </member>
        <member name="M:EasyHosting.Models.Server.Session.Has(System.String)">
            <summary>
            Określa czy wartość o podanej nazwie jest zapisana w sesji
            </summary>
            <param name="name">Nazwa do sprawdzenia</param>
            <returns>True jeśli zapisana w sesji, False w przeciwnym wypadku</returns>
        </member>
        <member name="M:EasyHosting.Models.Server.Session.Remove(System.String)">
            <summary>
            Usuwa wartość z sesji
            </summary>
            <param name="name">Nazwa wartości do usunięcia</param>
            <returns>True, jeśli wartość była w sesji, False w przeciwnym wypadku</returns>
        </member>
    </members>
</doc>
